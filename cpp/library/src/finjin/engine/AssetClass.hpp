//Copyright (c) 2017 Finjin
//
//This file is part of Finjin Engine (finjin-engine).
//
//Finjin Engine is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//
//This Source Code Form is subject to the terms of the Mozilla Public
//License, v. 2.0. If a copy of the MPL was not distributed with this
//file, You can obtain one at http://mozilla.org/MPL/2.0/.


#pragma once


//Includes---------------------------------------------------------------------
#include "finjin/common/Path.hpp"
#include "finjin/common/StreamingFileFormat.hpp"
#include "finjin/common/Utf8String.hpp"


//Classes----------------------------------------------------------------------
namespace Finjin { namespace Engine {

    using namespace Finjin::Common;

    enum class AssetClass
    {
        FONT, //Not used at the moment
        INPUT_BINDINGS, //Prewritten input bindings configuration files
        INPUT_DEVICE, //Prewritten device onfiguration files
        MATERIAL, //Exported by FinjinExporter
        MESH, //Exported by FinjinExporter
        MORPH_ANIMATION, //Exported by FinjinExporter
        NODE_ANIMATION, //Exported by FinjinExporter
        POSE_ANIMATION, //Exported by FinjinExporter
        PREFAB, //Exported by FinjinExporter
        SCENE, //Exported by FinjinExporter
        SETTINGS, //Various generic configuration files
        SHADER, //Generated by shader_generator.py or some other means
        SKELETON, //Exported by FinjinExporter
        SKELETON_ANIMATION, //Exported by FinjinExporter
        SOUND, //Exported by FinjinExporter
        STRING_TABLE,
        TEXTURE, //Exported by FinjinExporter
        USER_DATA_TYPES, 

        COUNT
    };

    struct AssetClassUtilities
    {
        static Utf8String ToString(size_t index, bool directoryName = false);
        static Utf8String ToString(AssetClass value, bool directoryName = false);

        static void ToString(Utf8String& result, size_t index, bool directoryName = false);
        static void ToString(Utf8String& result, AssetClass value, bool directoryName = false);
        
        template <typename T>
        static AssetClass Parse(const T& value)
        {
            for (size_t i = 0; i < (size_t)AssetClass::COUNT; i++)
            {
                if (value == ToString(i, false) || value == ToString(i, true))
                    return (AssetClass)i;
            }

            return AssetClass::COUNT;
        }

        static AssetClass ParseFromExtension(const Utf8String& extension);

        static bool IsHandwrittenExtension(const Utf8String& extension);
        
        static Utf8String ToHandwrittenString(AssetClass assetClass);
        
        static Utf8String ToDirectoryName(AssetClass value);
        static void ToDirectoryName(Utf8String& result, AssetClass value);
        
        static void FixObjectName(Path& fileName);
    };
    
} }
