//Copyright (c) 2017 Finjin
//
//This file is part of Finjin Engine (finjin-engine).
//
//Finjin Engine is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//
//This Source Code Form is subject to the terms of the Mozilla Public
//License, v. 2.0. If a copy of the MPL was not distributed with this
//file, You can obtain one at http://mozilla.org/MPL/2.0/.
//
//This file was generated by generate_vulkan_includes.py.


#pragma once


//Includes---------------------------------------------------------------------
#include "vulkan.h"
#include "finjin/common/Error.hpp"


//Types------------------------------------------------------------------------
namespace Finjin { namespace Engine {

    struct VulkanGlobalFunctions
    {
        VulkanGlobalFunctions();

        void InitializeGlobal(PFN_vkGetInstanceProcAddr GetInstanceProcAddr, Finjin::Common::Error& error);
        void ShutdownGlobal();

        PFN_vkGetInstanceProcAddr GetInstanceProcAddr;

        PFN_vkCreateInstance CreateInstance; //VK_core
        PFN_vkEnumerateInstanceExtensionProperties EnumerateInstanceExtensionProperties; //VK_core
        PFN_vkEnumerateInstanceLayerProperties EnumerateInstanceLayerProperties; //VK_core
    };

    struct VulkanInstanceFunctions
    {
        VkInstance instance;

        VulkanInstanceFunctions();

        void InitializeInstance(VkInstance instance, VulkanGlobalFunctions& globalFunctions, Finjin::Common::Error& error);
        void ShutdownInstance(VkAllocationCallbacks* allocationCallbacks);

        PFN_vkDestroyInstance DestroyInstance; //VK_core
        PFN_vkEnumeratePhysicalDevices EnumeratePhysicalDevices; //VK_core
        PFN_vkGetPhysicalDeviceFeatures GetPhysicalDeviceFeatures; //VK_core
        PFN_vkGetPhysicalDeviceFormatProperties GetPhysicalDeviceFormatProperties; //VK_core
        PFN_vkGetPhysicalDeviceImageFormatProperties GetPhysicalDeviceImageFormatProperties; //VK_core
        PFN_vkGetPhysicalDeviceProperties GetPhysicalDeviceProperties; //VK_core
        PFN_vkGetPhysicalDeviceQueueFamilyProperties GetPhysicalDeviceQueueFamilyProperties; //VK_core
        PFN_vkGetPhysicalDeviceMemoryProperties GetPhysicalDeviceMemoryProperties; //VK_core
        PFN_vkGetInstanceProcAddr GetInstanceProcAddr; //VK_core
        PFN_vkCreateDevice CreateDevice; //VK_core
        PFN_vkEnumerateDeviceExtensionProperties EnumerateDeviceExtensionProperties; //VK_core
        PFN_vkEnumerateDeviceLayerProperties EnumerateDeviceLayerProperties; //VK_core
        PFN_vkGetPhysicalDeviceSparseImageFormatProperties GetPhysicalDeviceSparseImageFormatProperties; //VK_core
        PFN_vkDestroySurfaceKHR DestroySurfaceKHR; //VK_KHR_surface
        PFN_vkGetPhysicalDeviceSurfaceSupportKHR GetPhysicalDeviceSurfaceSupportKHR; //VK_KHR_surface
        PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR GetPhysicalDeviceSurfaceCapabilitiesKHR; //VK_KHR_surface
        PFN_vkGetPhysicalDeviceSurfaceFormatsKHR GetPhysicalDeviceSurfaceFormatsKHR; //VK_KHR_surface
        PFN_vkGetPhysicalDeviceSurfacePresentModesKHR GetPhysicalDeviceSurfacePresentModesKHR; //VK_KHR_surface
        PFN_vkGetPhysicalDeviceDisplayPropertiesKHR GetPhysicalDeviceDisplayPropertiesKHR; //VK_KHR_display
        PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR GetPhysicalDeviceDisplayPlanePropertiesKHR; //VK_KHR_display
        PFN_vkGetDisplayPlaneSupportedDisplaysKHR GetDisplayPlaneSupportedDisplaysKHR; //VK_KHR_display
        PFN_vkGetDisplayModePropertiesKHR GetDisplayModePropertiesKHR; //VK_KHR_display
        PFN_vkCreateDisplayModeKHR CreateDisplayModeKHR; //VK_KHR_display
        PFN_vkGetDisplayPlaneCapabilitiesKHR GetDisplayPlaneCapabilitiesKHR; //VK_KHR_display
        PFN_vkCreateDisplayPlaneSurfaceKHR CreateDisplayPlaneSurfaceKHR; //VK_KHR_display
    #ifdef VK_USE_PLATFORM_XLIB_KHR
        PFN_vkCreateXlibSurfaceKHR CreateXlibSurfaceKHR; //VK_KHR_xlib_surface
    #endif
    #ifdef VK_USE_PLATFORM_XLIB_KHR
        PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR GetPhysicalDeviceXlibPresentationSupportKHR; //VK_KHR_xlib_surface
    #endif
    #ifdef VK_USE_PLATFORM_XCB_KHR
        PFN_vkCreateXcbSurfaceKHR CreateXcbSurfaceKHR; //VK_KHR_xcb_surface
    #endif
    #ifdef VK_USE_PLATFORM_XCB_KHR
        PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR GetPhysicalDeviceXcbPresentationSupportKHR; //VK_KHR_xcb_surface
    #endif
    #ifdef VK_USE_PLATFORM_WAYLAND_KHR
        PFN_vkCreateWaylandSurfaceKHR CreateWaylandSurfaceKHR; //VK_KHR_wayland_surface
    #endif
    #ifdef VK_USE_PLATFORM_WAYLAND_KHR
        PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR GetPhysicalDeviceWaylandPresentationSupportKHR; //VK_KHR_wayland_surface
    #endif
    #ifdef VK_USE_PLATFORM_MIR_KHR
        PFN_vkCreateMirSurfaceKHR CreateMirSurfaceKHR; //VK_KHR_mir_surface
    #endif
    #ifdef VK_USE_PLATFORM_MIR_KHR
        PFN_vkGetPhysicalDeviceMirPresentationSupportKHR GetPhysicalDeviceMirPresentationSupportKHR; //VK_KHR_mir_surface
    #endif
    #ifdef VK_USE_PLATFORM_ANDROID_KHR
        PFN_vkCreateAndroidSurfaceKHR CreateAndroidSurfaceKHR; //VK_KHR_android_surface
    #endif
    #ifdef VK_USE_PLATFORM_WIN32_KHR
        PFN_vkCreateWin32SurfaceKHR CreateWin32SurfaceKHR; //VK_KHR_win32_surface
    #endif
    #ifdef VK_USE_PLATFORM_WIN32_KHR
        PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR GetPhysicalDeviceWin32PresentationSupportKHR; //VK_KHR_win32_surface
    #endif
        PFN_vkGetPhysicalDeviceFeatures2KHR GetPhysicalDeviceFeatures2KHR; //VK_KHR_get_physical_device_properties2
        PFN_vkGetPhysicalDeviceProperties2KHR GetPhysicalDeviceProperties2KHR; //VK_KHR_get_physical_device_properties2
        PFN_vkGetPhysicalDeviceFormatProperties2KHR GetPhysicalDeviceFormatProperties2KHR; //VK_KHR_get_physical_device_properties2
        PFN_vkGetPhysicalDeviceImageFormatProperties2KHR GetPhysicalDeviceImageFormatProperties2KHR; //VK_KHR_get_physical_device_properties2
        PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR GetPhysicalDeviceQueueFamilyProperties2KHR; //VK_KHR_get_physical_device_properties2
        PFN_vkGetPhysicalDeviceMemoryProperties2KHR GetPhysicalDeviceMemoryProperties2KHR; //VK_KHR_get_physical_device_properties2
        PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR GetPhysicalDeviceSparseImageFormatProperties2KHR; //VK_KHR_get_physical_device_properties2
        PFN_vkCreateDebugReportCallbackEXT CreateDebugReportCallbackEXT; //VK_EXT_debug_report
        PFN_vkDestroyDebugReportCallbackEXT DestroyDebugReportCallbackEXT; //VK_EXT_debug_report
        PFN_vkDebugReportMessageEXT DebugReportMessageEXT; //VK_EXT_debug_report
        PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV GetPhysicalDeviceExternalImageFormatPropertiesNV; //VK_NV_external_memory_capabilities
        PFN_vkGetPhysicalDevicePresentRectanglesKHX GetPhysicalDevicePresentRectanglesKHX; //VK_KHX_device_group
    #ifdef VK_USE_PLATFORM_VI_NN
        PFN_vkCreateViSurfaceNN CreateViSurfaceNN; //VK_NN_vi_surface
    #endif
        PFN_vkEnumeratePhysicalDeviceGroupsKHX EnumeratePhysicalDeviceGroupsKHX; //VK_KHX_device_group_creation
        PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHX GetPhysicalDeviceExternalBufferPropertiesKHX; //VK_KHX_external_memory_capabilities
        PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHX GetPhysicalDeviceExternalSemaphorePropertiesKHX; //VK_KHX_external_semaphore_capabilities
        PFN_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX GetPhysicalDeviceGeneratedCommandsPropertiesNVX; //VK_NVX_device_generated_commands
        PFN_vkReleaseDisplayEXT ReleaseDisplayEXT; //VK_EXT_direct_mode_display
    #ifdef VK_USE_PLATFORM_XLIB_XRANDR_EXT
        PFN_vkAcquireXlibDisplayEXT AcquireXlibDisplayEXT; //VK_EXT_acquire_xlib_display
    #endif
    #ifdef VK_USE_PLATFORM_XLIB_XRANDR_EXT
        PFN_vkGetRandROutputDisplayEXT GetRandROutputDisplayEXT; //VK_EXT_acquire_xlib_display
    #endif
        PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT GetPhysicalDeviceSurfaceCapabilities2EXT; //VK_EXT_display_surface_counter
    #ifdef VK_USE_PLATFORM_IOS_MVK
        PFN_vkCreateIOSSurfaceMVK CreateIOSSurfaceMVK; //VK_MVK_ios_surface
    #endif
    #ifdef VK_USE_PLATFORM_MACOS_MVK
        PFN_vkCreateMacOSSurfaceMVK CreateMacOSSurfaceMVK; //VK_MVK_macos_surface
    #endif
    };

    struct VulkanDeviceFunctions
    {
        VkDevice device;

        VulkanDeviceFunctions();

        void InitializeDevice(VkDevice device, VulkanInstanceFunctions& instanceFunctions, Finjin::Common::Error& error);
        void ShutdownDevice(VkAllocationCallbacks* allocationCallbacks);

        PFN_vkGetDeviceProcAddr GetDeviceProcAddr; //VK_core
        PFN_vkDestroyDevice DestroyDevice; //VK_core
        PFN_vkGetDeviceQueue GetDeviceQueue; //VK_core
        PFN_vkQueueSubmit QueueSubmit; //VK_core
        PFN_vkQueueWaitIdle QueueWaitIdle; //VK_core
        PFN_vkDeviceWaitIdle DeviceWaitIdle; //VK_core
        PFN_vkAllocateMemory AllocateMemory; //VK_core
        PFN_vkFreeMemory FreeMemory; //VK_core
        PFN_vkMapMemory MapMemory; //VK_core
        PFN_vkUnmapMemory UnmapMemory; //VK_core
        PFN_vkFlushMappedMemoryRanges FlushMappedMemoryRanges; //VK_core
        PFN_vkInvalidateMappedMemoryRanges InvalidateMappedMemoryRanges; //VK_core
        PFN_vkGetDeviceMemoryCommitment GetDeviceMemoryCommitment; //VK_core
        PFN_vkBindBufferMemory BindBufferMemory; //VK_core
        PFN_vkBindImageMemory BindImageMemory; //VK_core
        PFN_vkGetBufferMemoryRequirements GetBufferMemoryRequirements; //VK_core
        PFN_vkGetImageMemoryRequirements GetImageMemoryRequirements; //VK_core
        PFN_vkGetImageSparseMemoryRequirements GetImageSparseMemoryRequirements; //VK_core
        PFN_vkQueueBindSparse QueueBindSparse; //VK_core
        PFN_vkCreateFence CreateFence; //VK_core
        PFN_vkDestroyFence DestroyFence; //VK_core
        PFN_vkResetFences ResetFences; //VK_core
        PFN_vkGetFenceStatus GetFenceStatus; //VK_core
        PFN_vkWaitForFences WaitForFences; //VK_core
        PFN_vkCreateSemaphore CreateSemaphore; //VK_core
        PFN_vkDestroySemaphore DestroySemaphore; //VK_core
        PFN_vkCreateEvent CreateEvent; //VK_core
        PFN_vkDestroyEvent DestroyEvent; //VK_core
        PFN_vkGetEventStatus GetEventStatus; //VK_core
        PFN_vkSetEvent SetEvent; //VK_core
        PFN_vkResetEvent ResetEvent; //VK_core
        PFN_vkCreateQueryPool CreateQueryPool; //VK_core
        PFN_vkDestroyQueryPool DestroyQueryPool; //VK_core
        PFN_vkGetQueryPoolResults GetQueryPoolResults; //VK_core
        PFN_vkCreateBuffer CreateBuffer; //VK_core
        PFN_vkDestroyBuffer DestroyBuffer; //VK_core
        PFN_vkCreateBufferView CreateBufferView; //VK_core
        PFN_vkDestroyBufferView DestroyBufferView; //VK_core
        PFN_vkCreateImage CreateImage; //VK_core
        PFN_vkDestroyImage DestroyImage; //VK_core
        PFN_vkGetImageSubresourceLayout GetImageSubresourceLayout; //VK_core
        PFN_vkCreateImageView CreateImageView; //VK_core
        PFN_vkDestroyImageView DestroyImageView; //VK_core
        PFN_vkCreateShaderModule CreateShaderModule; //VK_core
        PFN_vkDestroyShaderModule DestroyShaderModule; //VK_core
        PFN_vkCreatePipelineCache CreatePipelineCache; //VK_core
        PFN_vkDestroyPipelineCache DestroyPipelineCache; //VK_core
        PFN_vkGetPipelineCacheData GetPipelineCacheData; //VK_core
        PFN_vkMergePipelineCaches MergePipelineCaches; //VK_core
        PFN_vkCreateGraphicsPipelines CreateGraphicsPipelines; //VK_core
        PFN_vkCreateComputePipelines CreateComputePipelines; //VK_core
        PFN_vkDestroyPipeline DestroyPipeline; //VK_core
        PFN_vkCreatePipelineLayout CreatePipelineLayout; //VK_core
        PFN_vkDestroyPipelineLayout DestroyPipelineLayout; //VK_core
        PFN_vkCreateSampler CreateSampler; //VK_core
        PFN_vkDestroySampler DestroySampler; //VK_core
        PFN_vkCreateDescriptorSetLayout CreateDescriptorSetLayout; //VK_core
        PFN_vkDestroyDescriptorSetLayout DestroyDescriptorSetLayout; //VK_core
        PFN_vkCreateDescriptorPool CreateDescriptorPool; //VK_core
        PFN_vkDestroyDescriptorPool DestroyDescriptorPool; //VK_core
        PFN_vkResetDescriptorPool ResetDescriptorPool; //VK_core
        PFN_vkAllocateDescriptorSets AllocateDescriptorSets; //VK_core
        PFN_vkFreeDescriptorSets FreeDescriptorSets; //VK_core
        PFN_vkUpdateDescriptorSets UpdateDescriptorSets; //VK_core
        PFN_vkCreateFramebuffer CreateFramebuffer; //VK_core
        PFN_vkDestroyFramebuffer DestroyFramebuffer; //VK_core
        PFN_vkCreateRenderPass CreateRenderPass; //VK_core
        PFN_vkDestroyRenderPass DestroyRenderPass; //VK_core
        PFN_vkGetRenderAreaGranularity GetRenderAreaGranularity; //VK_core
        PFN_vkCreateCommandPool CreateCommandPool; //VK_core
        PFN_vkDestroyCommandPool DestroyCommandPool; //VK_core
        PFN_vkResetCommandPool ResetCommandPool; //VK_core
        PFN_vkAllocateCommandBuffers AllocateCommandBuffers; //VK_core
        PFN_vkFreeCommandBuffers FreeCommandBuffers; //VK_core
        PFN_vkBeginCommandBuffer BeginCommandBuffer; //VK_core
        PFN_vkEndCommandBuffer EndCommandBuffer; //VK_core
        PFN_vkResetCommandBuffer ResetCommandBuffer; //VK_core
        PFN_vkCmdBindPipeline CmdBindPipeline; //VK_core
        PFN_vkCmdSetViewport CmdSetViewport; //VK_core
        PFN_vkCmdSetScissor CmdSetScissor; //VK_core
        PFN_vkCmdSetLineWidth CmdSetLineWidth; //VK_core
        PFN_vkCmdSetDepthBias CmdSetDepthBias; //VK_core
        PFN_vkCmdSetBlendConstants CmdSetBlendConstants; //VK_core
        PFN_vkCmdSetDepthBounds CmdSetDepthBounds; //VK_core
        PFN_vkCmdSetStencilCompareMask CmdSetStencilCompareMask; //VK_core
        PFN_vkCmdSetStencilWriteMask CmdSetStencilWriteMask; //VK_core
        PFN_vkCmdSetStencilReference CmdSetStencilReference; //VK_core
        PFN_vkCmdBindDescriptorSets CmdBindDescriptorSets; //VK_core
        PFN_vkCmdBindIndexBuffer CmdBindIndexBuffer; //VK_core
        PFN_vkCmdBindVertexBuffers CmdBindVertexBuffers; //VK_core
        PFN_vkCmdDraw CmdDraw; //VK_core
        PFN_vkCmdDrawIndexed CmdDrawIndexed; //VK_core
        PFN_vkCmdDrawIndirect CmdDrawIndirect; //VK_core
        PFN_vkCmdDrawIndexedIndirect CmdDrawIndexedIndirect; //VK_core
        PFN_vkCmdDispatch CmdDispatch; //VK_core
        PFN_vkCmdDispatchIndirect CmdDispatchIndirect; //VK_core
        PFN_vkCmdCopyBuffer CmdCopyBuffer; //VK_core
        PFN_vkCmdCopyImage CmdCopyImage; //VK_core
        PFN_vkCmdBlitImage CmdBlitImage; //VK_core
        PFN_vkCmdCopyBufferToImage CmdCopyBufferToImage; //VK_core
        PFN_vkCmdCopyImageToBuffer CmdCopyImageToBuffer; //VK_core
        PFN_vkCmdUpdateBuffer CmdUpdateBuffer; //VK_core
        PFN_vkCmdFillBuffer CmdFillBuffer; //VK_core
        PFN_vkCmdClearColorImage CmdClearColorImage; //VK_core
        PFN_vkCmdClearDepthStencilImage CmdClearDepthStencilImage; //VK_core
        PFN_vkCmdClearAttachments CmdClearAttachments; //VK_core
        PFN_vkCmdResolveImage CmdResolveImage; //VK_core
        PFN_vkCmdSetEvent CmdSetEvent; //VK_core
        PFN_vkCmdResetEvent CmdResetEvent; //VK_core
        PFN_vkCmdWaitEvents CmdWaitEvents; //VK_core
        PFN_vkCmdPipelineBarrier CmdPipelineBarrier; //VK_core
        PFN_vkCmdBeginQuery CmdBeginQuery; //VK_core
        PFN_vkCmdEndQuery CmdEndQuery; //VK_core
        PFN_vkCmdResetQueryPool CmdResetQueryPool; //VK_core
        PFN_vkCmdWriteTimestamp CmdWriteTimestamp; //VK_core
        PFN_vkCmdCopyQueryPoolResults CmdCopyQueryPoolResults; //VK_core
        PFN_vkCmdPushConstants CmdPushConstants; //VK_core
        PFN_vkCmdBeginRenderPass CmdBeginRenderPass; //VK_core
        PFN_vkCmdNextSubpass CmdNextSubpass; //VK_core
        PFN_vkCmdEndRenderPass CmdEndRenderPass; //VK_core
        PFN_vkCmdExecuteCommands CmdExecuteCommands; //VK_core
        PFN_vkCreateSwapchainKHR CreateSwapchainKHR; //VK_KHR_swapchain
        PFN_vkDestroySwapchainKHR DestroySwapchainKHR; //VK_KHR_swapchain
        PFN_vkGetSwapchainImagesKHR GetSwapchainImagesKHR; //VK_KHR_swapchain
        PFN_vkAcquireNextImageKHR AcquireNextImageKHR; //VK_KHR_swapchain
        PFN_vkQueuePresentKHR QueuePresentKHR; //VK_KHR_swapchain
        PFN_vkCreateSharedSwapchainsKHR CreateSharedSwapchainsKHR; //VK_KHR_display_swapchain
        PFN_vkTrimCommandPoolKHR TrimCommandPoolKHR; //VK_KHR_maintenance1
        PFN_vkCmdPushDescriptorSetKHR CmdPushDescriptorSetKHR; //VK_KHR_push_descriptor
        PFN_vkCreateDescriptorUpdateTemplateKHR CreateDescriptorUpdateTemplateKHR; //VK_KHR_descriptor_update_template
        PFN_vkDestroyDescriptorUpdateTemplateKHR DestroyDescriptorUpdateTemplateKHR; //VK_KHR_descriptor_update_template
        PFN_vkUpdateDescriptorSetWithTemplateKHR UpdateDescriptorSetWithTemplateKHR; //VK_KHR_descriptor_update_template
        PFN_vkCmdPushDescriptorSetWithTemplateKHR CmdPushDescriptorSetWithTemplateKHR; //VK_KHR_descriptor_update_template
        PFN_vkDebugMarkerSetObjectTagEXT DebugMarkerSetObjectTagEXT; //VK_EXT_debug_marker
        PFN_vkDebugMarkerSetObjectNameEXT DebugMarkerSetObjectNameEXT; //VK_EXT_debug_marker
        PFN_vkCmdDebugMarkerBeginEXT CmdDebugMarkerBeginEXT; //VK_EXT_debug_marker
        PFN_vkCmdDebugMarkerEndEXT CmdDebugMarkerEndEXT; //VK_EXT_debug_marker
        PFN_vkCmdDebugMarkerInsertEXT CmdDebugMarkerInsertEXT; //VK_EXT_debug_marker
        PFN_vkCmdDrawIndirectCountAMD CmdDrawIndirectCountAMD; //VK_AMD_draw_indirect_count
        PFN_vkCmdDrawIndexedIndirectCountAMD CmdDrawIndexedIndirectCountAMD; //VK_AMD_draw_indirect_count
    #ifdef VK_USE_PLATFORM_WIN32_KHR
        PFN_vkGetMemoryWin32HandleNV GetMemoryWin32HandleNV; //VK_NV_external_memory_win32
    #endif
        PFN_vkGetDeviceGroupPeerMemoryFeaturesKHX GetDeviceGroupPeerMemoryFeaturesKHX; //VK_KHX_device_group
        PFN_vkBindBufferMemory2KHX BindBufferMemory2KHX; //VK_KHX_device_group
        PFN_vkBindImageMemory2KHX BindImageMemory2KHX; //VK_KHX_device_group
        PFN_vkCmdSetDeviceMaskKHX CmdSetDeviceMaskKHX; //VK_KHX_device_group
        PFN_vkGetDeviceGroupPresentCapabilitiesKHX GetDeviceGroupPresentCapabilitiesKHX; //VK_KHX_device_group
        PFN_vkGetDeviceGroupSurfacePresentModesKHX GetDeviceGroupSurfacePresentModesKHX; //VK_KHX_device_group
        PFN_vkAcquireNextImage2KHX AcquireNextImage2KHX; //VK_KHX_device_group
        PFN_vkCmdDispatchBaseKHX CmdDispatchBaseKHX; //VK_KHX_device_group
    #ifdef VK_USE_PLATFORM_WIN32_KHX
        PFN_vkGetMemoryWin32HandleKHX GetMemoryWin32HandleKHX; //VK_KHX_external_memory_win32
    #endif
    #ifdef VK_USE_PLATFORM_WIN32_KHX
        PFN_vkGetMemoryWin32HandlePropertiesKHX GetMemoryWin32HandlePropertiesKHX; //VK_KHX_external_memory_win32
    #endif
        PFN_vkGetMemoryFdKHX GetMemoryFdKHX; //VK_KHX_external_memory_fd
        PFN_vkGetMemoryFdPropertiesKHX GetMemoryFdPropertiesKHX; //VK_KHX_external_memory_fd
    #ifdef VK_USE_PLATFORM_WIN32_KHX
        PFN_vkImportSemaphoreWin32HandleKHX ImportSemaphoreWin32HandleKHX; //VK_KHX_external_semaphore_win32
    #endif
    #ifdef VK_USE_PLATFORM_WIN32_KHX
        PFN_vkGetSemaphoreWin32HandleKHX GetSemaphoreWin32HandleKHX; //VK_KHX_external_semaphore_win32
    #endif
        PFN_vkImportSemaphoreFdKHX ImportSemaphoreFdKHX; //VK_KHX_external_semaphore_fd
        PFN_vkGetSemaphoreFdKHX GetSemaphoreFdKHX; //VK_KHX_external_semaphore_fd
        PFN_vkCmdProcessCommandsNVX CmdProcessCommandsNVX; //VK_NVX_device_generated_commands
        PFN_vkCmdReserveSpaceForCommandsNVX CmdReserveSpaceForCommandsNVX; //VK_NVX_device_generated_commands
        PFN_vkCreateIndirectCommandsLayoutNVX CreateIndirectCommandsLayoutNVX; //VK_NVX_device_generated_commands
        PFN_vkDestroyIndirectCommandsLayoutNVX DestroyIndirectCommandsLayoutNVX; //VK_NVX_device_generated_commands
        PFN_vkCreateObjectTableNVX CreateObjectTableNVX; //VK_NVX_device_generated_commands
        PFN_vkDestroyObjectTableNVX DestroyObjectTableNVX; //VK_NVX_device_generated_commands
        PFN_vkRegisterObjectsNVX RegisterObjectsNVX; //VK_NVX_device_generated_commands
        PFN_vkUnregisterObjectsNVX UnregisterObjectsNVX; //VK_NVX_device_generated_commands
        PFN_vkCmdSetViewportWScalingNV CmdSetViewportWScalingNV; //VK_NV_clip_space_w_scaling
        PFN_vkDisplayPowerControlEXT DisplayPowerControlEXT; //VK_EXT_display_control
        PFN_vkRegisterDeviceEventEXT RegisterDeviceEventEXT; //VK_EXT_display_control
        PFN_vkRegisterDisplayEventEXT RegisterDisplayEventEXT; //VK_EXT_display_control
        PFN_vkGetSwapchainCounterEXT GetSwapchainCounterEXT; //VK_EXT_display_control
        PFN_vkGetRefreshCycleDurationGOOGLE GetRefreshCycleDurationGOOGLE; //VK_GOOGLE_display_timing
        PFN_vkGetPastPresentationTimingGOOGLE GetPastPresentationTimingGOOGLE; //VK_GOOGLE_display_timing
        PFN_vkCmdSetDiscardRectangleEXT CmdSetDiscardRectangleEXT; //VK_EXT_discard_rectangles
        PFN_vkSetHdrMetadataEXT SetHdrMetadataEXT; //VK_EXT_hdr_metadata
    };

    struct VulkanFormat
    {
        static const char* ToString(VkFormat format);
    };

    struct VulkanResult
    {
        static const char* ToString(VkResult result);
        static bool IsError(VkResult result) { return result < 0; }
    };

} }
