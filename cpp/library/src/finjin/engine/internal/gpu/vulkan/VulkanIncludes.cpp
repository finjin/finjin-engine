//Copyright (c) 2017 Finjin
//
//This file is part of Finjin Engine (finjin-engine).
//
//Finjin Engine is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//
//This Source Code Form is subject to the terms of the Mozilla Public
//License, v. 2.0. If a copy of the MPL was not distributed with this
//file, You can obtain one at http://mozilla.org/MPL/2.0/.
//
//This file was generated by generate_vulkan_includes.py.


//Includes---------------------------------------------------------------------
#include "FinjinPrecompiled.hpp"

#if FINJIN_TARGET_GPU_SYSTEM == FINJIN_TARGET_GPU_SYSTEM_VULKAN

#include "VulkanIncludes.hpp"

using namespace Finjin::Engine;


//Implementation---------------------------------------------------------------
VulkanGlobalFunctions::VulkanGlobalFunctions()
{
    FINJIN_ZERO_ITEM(*this);
}

void VulkanGlobalFunctions::InitializeGlobal(PFN_vkGetInstanceProcAddr GetInstanceProcAddr, Finjin::Common::Error& error)
{
    FINJIN_ERROR_METHOD_START(error);

    this->GetInstanceProcAddr = GetInstanceProcAddr;

    this->CreateInstance = reinterpret_cast<PFN_vkCreateInstance>(GetInstanceProcAddr(VK_NULL_HANDLE, "vkCreateInstance"));
    this->EnumerateInstanceExtensionProperties = reinterpret_cast<PFN_vkEnumerateInstanceExtensionProperties>(GetInstanceProcAddr(VK_NULL_HANDLE, "vkEnumerateInstanceExtensionProperties"));
    this->EnumerateInstanceLayerProperties = reinterpret_cast<PFN_vkEnumerateInstanceLayerProperties>(GetInstanceProcAddr(VK_NULL_HANDLE, "vkEnumerateInstanceLayerProperties"));
}

void VulkanGlobalFunctions::ShutdownGlobal()
{
    FINJIN_ZERO_ITEM(*this);
}

VulkanInstanceFunctions::VulkanInstanceFunctions()
{
    FINJIN_ZERO_ITEM(*this);
}

void VulkanInstanceFunctions::InitializeInstance(VkInstance instance, VulkanGlobalFunctions& globalFunctions, Finjin::Common::Error& error)
{
    FINJIN_ERROR_METHOD_START(error);

    this->instance = instance;

    this->GetInstanceProcAddr = reinterpret_cast<PFN_vkGetInstanceProcAddr>(globalFunctions.GetInstanceProcAddr(instance, "vkGetInstanceProcAddr"));
    this->DestroyInstance = reinterpret_cast<PFN_vkDestroyInstance>(this->GetInstanceProcAddr(instance, "vkDestroyInstance"));
    this->EnumeratePhysicalDevices = reinterpret_cast<PFN_vkEnumeratePhysicalDevices>(this->GetInstanceProcAddr(instance, "vkEnumeratePhysicalDevices"));
    this->GetPhysicalDeviceFeatures = reinterpret_cast<PFN_vkGetPhysicalDeviceFeatures>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceFeatures"));
    this->GetPhysicalDeviceFormatProperties = reinterpret_cast<PFN_vkGetPhysicalDeviceFormatProperties>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceFormatProperties"));
    this->GetPhysicalDeviceImageFormatProperties = reinterpret_cast<PFN_vkGetPhysicalDeviceImageFormatProperties>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceImageFormatProperties"));
    this->GetPhysicalDeviceProperties = reinterpret_cast<PFN_vkGetPhysicalDeviceProperties>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceProperties"));
    this->GetPhysicalDeviceQueueFamilyProperties = reinterpret_cast<PFN_vkGetPhysicalDeviceQueueFamilyProperties>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceQueueFamilyProperties"));
    this->GetPhysicalDeviceMemoryProperties = reinterpret_cast<PFN_vkGetPhysicalDeviceMemoryProperties>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceMemoryProperties"));
    this->CreateDevice = reinterpret_cast<PFN_vkCreateDevice>(this->GetInstanceProcAddr(instance, "vkCreateDevice"));
    this->EnumerateDeviceExtensionProperties = reinterpret_cast<PFN_vkEnumerateDeviceExtensionProperties>(this->GetInstanceProcAddr(instance, "vkEnumerateDeviceExtensionProperties"));
    this->EnumerateDeviceLayerProperties = reinterpret_cast<PFN_vkEnumerateDeviceLayerProperties>(this->GetInstanceProcAddr(instance, "vkEnumerateDeviceLayerProperties"));
    this->GetPhysicalDeviceSparseImageFormatProperties = reinterpret_cast<PFN_vkGetPhysicalDeviceSparseImageFormatProperties>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceSparseImageFormatProperties"));
    this->DestroySurfaceKHR = reinterpret_cast<PFN_vkDestroySurfaceKHR>(this->GetInstanceProcAddr(instance, "vkDestroySurfaceKHR"));
    this->GetPhysicalDeviceSurfaceSupportKHR = reinterpret_cast<PFN_vkGetPhysicalDeviceSurfaceSupportKHR>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceSupportKHR"));
    this->GetPhysicalDeviceSurfaceCapabilitiesKHR = reinterpret_cast<PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR"));
    this->GetPhysicalDeviceSurfaceFormatsKHR = reinterpret_cast<PFN_vkGetPhysicalDeviceSurfaceFormatsKHR>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceFormatsKHR"));
    this->GetPhysicalDeviceSurfacePresentModesKHR = reinterpret_cast<PFN_vkGetPhysicalDeviceSurfacePresentModesKHR>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfacePresentModesKHR"));
    this->GetPhysicalDeviceDisplayPropertiesKHR = reinterpret_cast<PFN_vkGetPhysicalDeviceDisplayPropertiesKHR>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceDisplayPropertiesKHR"));
    this->GetPhysicalDeviceDisplayPlanePropertiesKHR = reinterpret_cast<PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR"));
    this->GetDisplayPlaneSupportedDisplaysKHR = reinterpret_cast<PFN_vkGetDisplayPlaneSupportedDisplaysKHR>(this->GetInstanceProcAddr(instance, "vkGetDisplayPlaneSupportedDisplaysKHR"));
    this->GetDisplayModePropertiesKHR = reinterpret_cast<PFN_vkGetDisplayModePropertiesKHR>(this->GetInstanceProcAddr(instance, "vkGetDisplayModePropertiesKHR"));
    this->CreateDisplayModeKHR = reinterpret_cast<PFN_vkCreateDisplayModeKHR>(this->GetInstanceProcAddr(instance, "vkCreateDisplayModeKHR"));
    this->GetDisplayPlaneCapabilitiesKHR = reinterpret_cast<PFN_vkGetDisplayPlaneCapabilitiesKHR>(this->GetInstanceProcAddr(instance, "vkGetDisplayPlaneCapabilitiesKHR"));
    this->CreateDisplayPlaneSurfaceKHR = reinterpret_cast<PFN_vkCreateDisplayPlaneSurfaceKHR>(this->GetInstanceProcAddr(instance, "vkCreateDisplayPlaneSurfaceKHR"));
#ifdef VK_USE_PLATFORM_XLIB_KHR
    this->CreateXlibSurfaceKHR = reinterpret_cast<PFN_vkCreateXlibSurfaceKHR>(this->GetInstanceProcAddr(instance, "vkCreateXlibSurfaceKHR"));
#endif
#ifdef VK_USE_PLATFORM_XLIB_KHR
    this->GetPhysicalDeviceXlibPresentationSupportKHR = reinterpret_cast<PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceXlibPresentationSupportKHR"));
#endif
#ifdef VK_USE_PLATFORM_XCB_KHR
    this->CreateXcbSurfaceKHR = reinterpret_cast<PFN_vkCreateXcbSurfaceKHR>(this->GetInstanceProcAddr(instance, "vkCreateXcbSurfaceKHR"));
#endif
#ifdef VK_USE_PLATFORM_XCB_KHR
    this->GetPhysicalDeviceXcbPresentationSupportKHR = reinterpret_cast<PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceXcbPresentationSupportKHR"));
#endif
#ifdef VK_USE_PLATFORM_WAYLAND_KHR
    this->CreateWaylandSurfaceKHR = reinterpret_cast<PFN_vkCreateWaylandSurfaceKHR>(this->GetInstanceProcAddr(instance, "vkCreateWaylandSurfaceKHR"));
#endif
#ifdef VK_USE_PLATFORM_WAYLAND_KHR
    this->GetPhysicalDeviceWaylandPresentationSupportKHR = reinterpret_cast<PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceWaylandPresentationSupportKHR"));
#endif
#ifdef VK_USE_PLATFORM_MIR_KHR
    this->CreateMirSurfaceKHR = reinterpret_cast<PFN_vkCreateMirSurfaceKHR>(this->GetInstanceProcAddr(instance, "vkCreateMirSurfaceKHR"));
#endif
#ifdef VK_USE_PLATFORM_MIR_KHR
    this->GetPhysicalDeviceMirPresentationSupportKHR = reinterpret_cast<PFN_vkGetPhysicalDeviceMirPresentationSupportKHR>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceMirPresentationSupportKHR"));
#endif
#ifdef VK_USE_PLATFORM_ANDROID_KHR
    this->CreateAndroidSurfaceKHR = reinterpret_cast<PFN_vkCreateAndroidSurfaceKHR>(this->GetInstanceProcAddr(instance, "vkCreateAndroidSurfaceKHR"));
#endif
#ifdef VK_USE_PLATFORM_WIN32_KHR
    this->CreateWin32SurfaceKHR = reinterpret_cast<PFN_vkCreateWin32SurfaceKHR>(this->GetInstanceProcAddr(instance, "vkCreateWin32SurfaceKHR"));
#endif
#ifdef VK_USE_PLATFORM_WIN32_KHR
    this->GetPhysicalDeviceWin32PresentationSupportKHR = reinterpret_cast<PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceWin32PresentationSupportKHR"));
#endif
    this->GetPhysicalDeviceFeatures2KHR = reinterpret_cast<PFN_vkGetPhysicalDeviceFeatures2KHR>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceFeatures2KHR"));
    this->GetPhysicalDeviceProperties2KHR = reinterpret_cast<PFN_vkGetPhysicalDeviceProperties2KHR>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceProperties2KHR"));
    this->GetPhysicalDeviceFormatProperties2KHR = reinterpret_cast<PFN_vkGetPhysicalDeviceFormatProperties2KHR>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceFormatProperties2KHR"));
    this->GetPhysicalDeviceImageFormatProperties2KHR = reinterpret_cast<PFN_vkGetPhysicalDeviceImageFormatProperties2KHR>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceImageFormatProperties2KHR"));
    this->GetPhysicalDeviceQueueFamilyProperties2KHR = reinterpret_cast<PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceQueueFamilyProperties2KHR"));
    this->GetPhysicalDeviceMemoryProperties2KHR = reinterpret_cast<PFN_vkGetPhysicalDeviceMemoryProperties2KHR>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceMemoryProperties2KHR"));
    this->GetPhysicalDeviceSparseImageFormatProperties2KHR = reinterpret_cast<PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceSparseImageFormatProperties2KHR"));
    this->CreateDebugReportCallbackEXT = reinterpret_cast<PFN_vkCreateDebugReportCallbackEXT>(this->GetInstanceProcAddr(instance, "vkCreateDebugReportCallbackEXT"));
    this->DestroyDebugReportCallbackEXT = reinterpret_cast<PFN_vkDestroyDebugReportCallbackEXT>(this->GetInstanceProcAddr(instance, "vkDestroyDebugReportCallbackEXT"));
    this->DebugReportMessageEXT = reinterpret_cast<PFN_vkDebugReportMessageEXT>(this->GetInstanceProcAddr(instance, "vkDebugReportMessageEXT"));
    this->GetPhysicalDeviceExternalImageFormatPropertiesNV = reinterpret_cast<PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV"));
    this->GetPhysicalDevicePresentRectanglesKHX = reinterpret_cast<PFN_vkGetPhysicalDevicePresentRectanglesKHX>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDevicePresentRectanglesKHX"));
#ifdef VK_USE_PLATFORM_VI_NN
    this->CreateViSurfaceNN = reinterpret_cast<PFN_vkCreateViSurfaceNN>(this->GetInstanceProcAddr(instance, "vkCreateViSurfaceNN"));
#endif
    this->EnumeratePhysicalDeviceGroupsKHX = reinterpret_cast<PFN_vkEnumeratePhysicalDeviceGroupsKHX>(this->GetInstanceProcAddr(instance, "vkEnumeratePhysicalDeviceGroupsKHX"));
    this->GetPhysicalDeviceExternalBufferPropertiesKHX = reinterpret_cast<PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHX>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceExternalBufferPropertiesKHX"));
    this->GetPhysicalDeviceExternalSemaphorePropertiesKHX = reinterpret_cast<PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHX>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceExternalSemaphorePropertiesKHX"));
    this->GetPhysicalDeviceGeneratedCommandsPropertiesNVX = reinterpret_cast<PFN_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX"));
    this->ReleaseDisplayEXT = reinterpret_cast<PFN_vkReleaseDisplayEXT>(this->GetInstanceProcAddr(instance, "vkReleaseDisplayEXT"));
#ifdef VK_USE_PLATFORM_XLIB_XRANDR_EXT
    this->AcquireXlibDisplayEXT = reinterpret_cast<PFN_vkAcquireXlibDisplayEXT>(this->GetInstanceProcAddr(instance, "vkAcquireXlibDisplayEXT"));
#endif
#ifdef VK_USE_PLATFORM_XLIB_XRANDR_EXT
    this->GetRandROutputDisplayEXT = reinterpret_cast<PFN_vkGetRandROutputDisplayEXT>(this->GetInstanceProcAddr(instance, "vkGetRandROutputDisplayEXT"));
#endif
    this->GetPhysicalDeviceSurfaceCapabilities2EXT = reinterpret_cast<PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT>(this->GetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceCapabilities2EXT"));
#ifdef VK_USE_PLATFORM_IOS_MVK
    this->CreateIOSSurfaceMVK = reinterpret_cast<PFN_vkCreateIOSSurfaceMVK>(this->GetInstanceProcAddr(instance, "vkCreateIOSSurfaceMVK"));
#endif
#ifdef VK_USE_PLATFORM_MACOS_MVK
    this->CreateMacOSSurfaceMVK = reinterpret_cast<PFN_vkCreateMacOSSurfaceMVK>(this->GetInstanceProcAddr(instance, "vkCreateMacOSSurfaceMVK"));
#endif
}

void VulkanInstanceFunctions::ShutdownInstance(VkAllocationCallbacks* allocationCallbacks)
{
    if (this->DestroyInstance != nullptr)
        this->DestroyInstance(this->instance, allocationCallbacks);
    FINJIN_ZERO_ITEM(*this);
}

VulkanDeviceFunctions::VulkanDeviceFunctions()
{
    FINJIN_ZERO_ITEM(*this);
}

void VulkanDeviceFunctions::InitializeDevice(VkDevice device, VulkanInstanceFunctions& instanceFunctions, Finjin::Common::Error& error)
{
    FINJIN_ERROR_METHOD_START(error);

    this->device = device;

    this->GetDeviceProcAddr = reinterpret_cast<PFN_vkGetDeviceProcAddr>(instanceFunctions.GetInstanceProcAddr(instanceFunctions.instance, "vkGetDeviceProcAddr"));
    this->GetDeviceProcAddr = reinterpret_cast<PFN_vkGetDeviceProcAddr>(this->GetDeviceProcAddr(device, "vkGetDeviceProcAddr"));

    this->DestroyDevice = reinterpret_cast<PFN_vkDestroyDevice>(this->GetDeviceProcAddr(device, "vkDestroyDevice"));
    this->GetDeviceQueue = reinterpret_cast<PFN_vkGetDeviceQueue>(this->GetDeviceProcAddr(device, "vkGetDeviceQueue"));
    this->QueueSubmit = reinterpret_cast<PFN_vkQueueSubmit>(this->GetDeviceProcAddr(device, "vkQueueSubmit"));
    this->QueueWaitIdle = reinterpret_cast<PFN_vkQueueWaitIdle>(this->GetDeviceProcAddr(device, "vkQueueWaitIdle"));
    this->DeviceWaitIdle = reinterpret_cast<PFN_vkDeviceWaitIdle>(this->GetDeviceProcAddr(device, "vkDeviceWaitIdle"));
    this->AllocateMemory = reinterpret_cast<PFN_vkAllocateMemory>(this->GetDeviceProcAddr(device, "vkAllocateMemory"));
    this->FreeMemory = reinterpret_cast<PFN_vkFreeMemory>(this->GetDeviceProcAddr(device, "vkFreeMemory"));
    this->MapMemory = reinterpret_cast<PFN_vkMapMemory>(this->GetDeviceProcAddr(device, "vkMapMemory"));
    this->UnmapMemory = reinterpret_cast<PFN_vkUnmapMemory>(this->GetDeviceProcAddr(device, "vkUnmapMemory"));
    this->FlushMappedMemoryRanges = reinterpret_cast<PFN_vkFlushMappedMemoryRanges>(this->GetDeviceProcAddr(device, "vkFlushMappedMemoryRanges"));
    this->InvalidateMappedMemoryRanges = reinterpret_cast<PFN_vkInvalidateMappedMemoryRanges>(this->GetDeviceProcAddr(device, "vkInvalidateMappedMemoryRanges"));
    this->GetDeviceMemoryCommitment = reinterpret_cast<PFN_vkGetDeviceMemoryCommitment>(this->GetDeviceProcAddr(device, "vkGetDeviceMemoryCommitment"));
    this->BindBufferMemory = reinterpret_cast<PFN_vkBindBufferMemory>(this->GetDeviceProcAddr(device, "vkBindBufferMemory"));
    this->BindImageMemory = reinterpret_cast<PFN_vkBindImageMemory>(this->GetDeviceProcAddr(device, "vkBindImageMemory"));
    this->GetBufferMemoryRequirements = reinterpret_cast<PFN_vkGetBufferMemoryRequirements>(this->GetDeviceProcAddr(device, "vkGetBufferMemoryRequirements"));
    this->GetImageMemoryRequirements = reinterpret_cast<PFN_vkGetImageMemoryRequirements>(this->GetDeviceProcAddr(device, "vkGetImageMemoryRequirements"));
    this->GetImageSparseMemoryRequirements = reinterpret_cast<PFN_vkGetImageSparseMemoryRequirements>(this->GetDeviceProcAddr(device, "vkGetImageSparseMemoryRequirements"));
    this->QueueBindSparse = reinterpret_cast<PFN_vkQueueBindSparse>(this->GetDeviceProcAddr(device, "vkQueueBindSparse"));
    this->CreateFence = reinterpret_cast<PFN_vkCreateFence>(this->GetDeviceProcAddr(device, "vkCreateFence"));
    this->DestroyFence = reinterpret_cast<PFN_vkDestroyFence>(this->GetDeviceProcAddr(device, "vkDestroyFence"));
    this->ResetFences = reinterpret_cast<PFN_vkResetFences>(this->GetDeviceProcAddr(device, "vkResetFences"));
    this->GetFenceStatus = reinterpret_cast<PFN_vkGetFenceStatus>(this->GetDeviceProcAddr(device, "vkGetFenceStatus"));
    this->WaitForFences = reinterpret_cast<PFN_vkWaitForFences>(this->GetDeviceProcAddr(device, "vkWaitForFences"));
    this->CreateSemaphore = reinterpret_cast<PFN_vkCreateSemaphore>(this->GetDeviceProcAddr(device, "vkCreateSemaphore"));
    this->DestroySemaphore = reinterpret_cast<PFN_vkDestroySemaphore>(this->GetDeviceProcAddr(device, "vkDestroySemaphore"));
    this->CreateEvent = reinterpret_cast<PFN_vkCreateEvent>(this->GetDeviceProcAddr(device, "vkCreateEvent"));
    this->DestroyEvent = reinterpret_cast<PFN_vkDestroyEvent>(this->GetDeviceProcAddr(device, "vkDestroyEvent"));
    this->GetEventStatus = reinterpret_cast<PFN_vkGetEventStatus>(this->GetDeviceProcAddr(device, "vkGetEventStatus"));
    this->SetEvent = reinterpret_cast<PFN_vkSetEvent>(this->GetDeviceProcAddr(device, "vkSetEvent"));
    this->ResetEvent = reinterpret_cast<PFN_vkResetEvent>(this->GetDeviceProcAddr(device, "vkResetEvent"));
    this->CreateQueryPool = reinterpret_cast<PFN_vkCreateQueryPool>(this->GetDeviceProcAddr(device, "vkCreateQueryPool"));
    this->DestroyQueryPool = reinterpret_cast<PFN_vkDestroyQueryPool>(this->GetDeviceProcAddr(device, "vkDestroyQueryPool"));
    this->GetQueryPoolResults = reinterpret_cast<PFN_vkGetQueryPoolResults>(this->GetDeviceProcAddr(device, "vkGetQueryPoolResults"));
    this->CreateBuffer = reinterpret_cast<PFN_vkCreateBuffer>(this->GetDeviceProcAddr(device, "vkCreateBuffer"));
    this->DestroyBuffer = reinterpret_cast<PFN_vkDestroyBuffer>(this->GetDeviceProcAddr(device, "vkDestroyBuffer"));
    this->CreateBufferView = reinterpret_cast<PFN_vkCreateBufferView>(this->GetDeviceProcAddr(device, "vkCreateBufferView"));
    this->DestroyBufferView = reinterpret_cast<PFN_vkDestroyBufferView>(this->GetDeviceProcAddr(device, "vkDestroyBufferView"));
    this->CreateImage = reinterpret_cast<PFN_vkCreateImage>(this->GetDeviceProcAddr(device, "vkCreateImage"));
    this->DestroyImage = reinterpret_cast<PFN_vkDestroyImage>(this->GetDeviceProcAddr(device, "vkDestroyImage"));
    this->GetImageSubresourceLayout = reinterpret_cast<PFN_vkGetImageSubresourceLayout>(this->GetDeviceProcAddr(device, "vkGetImageSubresourceLayout"));
    this->CreateImageView = reinterpret_cast<PFN_vkCreateImageView>(this->GetDeviceProcAddr(device, "vkCreateImageView"));
    this->DestroyImageView = reinterpret_cast<PFN_vkDestroyImageView>(this->GetDeviceProcAddr(device, "vkDestroyImageView"));
    this->CreateShaderModule = reinterpret_cast<PFN_vkCreateShaderModule>(this->GetDeviceProcAddr(device, "vkCreateShaderModule"));
    this->DestroyShaderModule = reinterpret_cast<PFN_vkDestroyShaderModule>(this->GetDeviceProcAddr(device, "vkDestroyShaderModule"));
    this->CreatePipelineCache = reinterpret_cast<PFN_vkCreatePipelineCache>(this->GetDeviceProcAddr(device, "vkCreatePipelineCache"));
    this->DestroyPipelineCache = reinterpret_cast<PFN_vkDestroyPipelineCache>(this->GetDeviceProcAddr(device, "vkDestroyPipelineCache"));
    this->GetPipelineCacheData = reinterpret_cast<PFN_vkGetPipelineCacheData>(this->GetDeviceProcAddr(device, "vkGetPipelineCacheData"));
    this->MergePipelineCaches = reinterpret_cast<PFN_vkMergePipelineCaches>(this->GetDeviceProcAddr(device, "vkMergePipelineCaches"));
    this->CreateGraphicsPipelines = reinterpret_cast<PFN_vkCreateGraphicsPipelines>(this->GetDeviceProcAddr(device, "vkCreateGraphicsPipelines"));
    this->CreateComputePipelines = reinterpret_cast<PFN_vkCreateComputePipelines>(this->GetDeviceProcAddr(device, "vkCreateComputePipelines"));
    this->DestroyPipeline = reinterpret_cast<PFN_vkDestroyPipeline>(this->GetDeviceProcAddr(device, "vkDestroyPipeline"));
    this->CreatePipelineLayout = reinterpret_cast<PFN_vkCreatePipelineLayout>(this->GetDeviceProcAddr(device, "vkCreatePipelineLayout"));
    this->DestroyPipelineLayout = reinterpret_cast<PFN_vkDestroyPipelineLayout>(this->GetDeviceProcAddr(device, "vkDestroyPipelineLayout"));
    this->CreateSampler = reinterpret_cast<PFN_vkCreateSampler>(this->GetDeviceProcAddr(device, "vkCreateSampler"));
    this->DestroySampler = reinterpret_cast<PFN_vkDestroySampler>(this->GetDeviceProcAddr(device, "vkDestroySampler"));
    this->CreateDescriptorSetLayout = reinterpret_cast<PFN_vkCreateDescriptorSetLayout>(this->GetDeviceProcAddr(device, "vkCreateDescriptorSetLayout"));
    this->DestroyDescriptorSetLayout = reinterpret_cast<PFN_vkDestroyDescriptorSetLayout>(this->GetDeviceProcAddr(device, "vkDestroyDescriptorSetLayout"));
    this->CreateDescriptorPool = reinterpret_cast<PFN_vkCreateDescriptorPool>(this->GetDeviceProcAddr(device, "vkCreateDescriptorPool"));
    this->DestroyDescriptorPool = reinterpret_cast<PFN_vkDestroyDescriptorPool>(this->GetDeviceProcAddr(device, "vkDestroyDescriptorPool"));
    this->ResetDescriptorPool = reinterpret_cast<PFN_vkResetDescriptorPool>(this->GetDeviceProcAddr(device, "vkResetDescriptorPool"));
    this->AllocateDescriptorSets = reinterpret_cast<PFN_vkAllocateDescriptorSets>(this->GetDeviceProcAddr(device, "vkAllocateDescriptorSets"));
    this->FreeDescriptorSets = reinterpret_cast<PFN_vkFreeDescriptorSets>(this->GetDeviceProcAddr(device, "vkFreeDescriptorSets"));
    this->UpdateDescriptorSets = reinterpret_cast<PFN_vkUpdateDescriptorSets>(this->GetDeviceProcAddr(device, "vkUpdateDescriptorSets"));
    this->CreateFramebuffer = reinterpret_cast<PFN_vkCreateFramebuffer>(this->GetDeviceProcAddr(device, "vkCreateFramebuffer"));
    this->DestroyFramebuffer = reinterpret_cast<PFN_vkDestroyFramebuffer>(this->GetDeviceProcAddr(device, "vkDestroyFramebuffer"));
    this->CreateRenderPass = reinterpret_cast<PFN_vkCreateRenderPass>(this->GetDeviceProcAddr(device, "vkCreateRenderPass"));
    this->DestroyRenderPass = reinterpret_cast<PFN_vkDestroyRenderPass>(this->GetDeviceProcAddr(device, "vkDestroyRenderPass"));
    this->GetRenderAreaGranularity = reinterpret_cast<PFN_vkGetRenderAreaGranularity>(this->GetDeviceProcAddr(device, "vkGetRenderAreaGranularity"));
    this->CreateCommandPool = reinterpret_cast<PFN_vkCreateCommandPool>(this->GetDeviceProcAddr(device, "vkCreateCommandPool"));
    this->DestroyCommandPool = reinterpret_cast<PFN_vkDestroyCommandPool>(this->GetDeviceProcAddr(device, "vkDestroyCommandPool"));
    this->ResetCommandPool = reinterpret_cast<PFN_vkResetCommandPool>(this->GetDeviceProcAddr(device, "vkResetCommandPool"));
    this->AllocateCommandBuffers = reinterpret_cast<PFN_vkAllocateCommandBuffers>(this->GetDeviceProcAddr(device, "vkAllocateCommandBuffers"));
    this->FreeCommandBuffers = reinterpret_cast<PFN_vkFreeCommandBuffers>(this->GetDeviceProcAddr(device, "vkFreeCommandBuffers"));
    this->BeginCommandBuffer = reinterpret_cast<PFN_vkBeginCommandBuffer>(this->GetDeviceProcAddr(device, "vkBeginCommandBuffer"));
    this->EndCommandBuffer = reinterpret_cast<PFN_vkEndCommandBuffer>(this->GetDeviceProcAddr(device, "vkEndCommandBuffer"));
    this->ResetCommandBuffer = reinterpret_cast<PFN_vkResetCommandBuffer>(this->GetDeviceProcAddr(device, "vkResetCommandBuffer"));
    this->CmdBindPipeline = reinterpret_cast<PFN_vkCmdBindPipeline>(this->GetDeviceProcAddr(device, "vkCmdBindPipeline"));
    this->CmdSetViewport = reinterpret_cast<PFN_vkCmdSetViewport>(this->GetDeviceProcAddr(device, "vkCmdSetViewport"));
    this->CmdSetScissor = reinterpret_cast<PFN_vkCmdSetScissor>(this->GetDeviceProcAddr(device, "vkCmdSetScissor"));
    this->CmdSetLineWidth = reinterpret_cast<PFN_vkCmdSetLineWidth>(this->GetDeviceProcAddr(device, "vkCmdSetLineWidth"));
    this->CmdSetDepthBias = reinterpret_cast<PFN_vkCmdSetDepthBias>(this->GetDeviceProcAddr(device, "vkCmdSetDepthBias"));
    this->CmdSetBlendConstants = reinterpret_cast<PFN_vkCmdSetBlendConstants>(this->GetDeviceProcAddr(device, "vkCmdSetBlendConstants"));
    this->CmdSetDepthBounds = reinterpret_cast<PFN_vkCmdSetDepthBounds>(this->GetDeviceProcAddr(device, "vkCmdSetDepthBounds"));
    this->CmdSetStencilCompareMask = reinterpret_cast<PFN_vkCmdSetStencilCompareMask>(this->GetDeviceProcAddr(device, "vkCmdSetStencilCompareMask"));
    this->CmdSetStencilWriteMask = reinterpret_cast<PFN_vkCmdSetStencilWriteMask>(this->GetDeviceProcAddr(device, "vkCmdSetStencilWriteMask"));
    this->CmdSetStencilReference = reinterpret_cast<PFN_vkCmdSetStencilReference>(this->GetDeviceProcAddr(device, "vkCmdSetStencilReference"));
    this->CmdBindDescriptorSets = reinterpret_cast<PFN_vkCmdBindDescriptorSets>(this->GetDeviceProcAddr(device, "vkCmdBindDescriptorSets"));
    this->CmdBindIndexBuffer = reinterpret_cast<PFN_vkCmdBindIndexBuffer>(this->GetDeviceProcAddr(device, "vkCmdBindIndexBuffer"));
    this->CmdBindVertexBuffers = reinterpret_cast<PFN_vkCmdBindVertexBuffers>(this->GetDeviceProcAddr(device, "vkCmdBindVertexBuffers"));
    this->CmdDraw = reinterpret_cast<PFN_vkCmdDraw>(this->GetDeviceProcAddr(device, "vkCmdDraw"));
    this->CmdDrawIndexed = reinterpret_cast<PFN_vkCmdDrawIndexed>(this->GetDeviceProcAddr(device, "vkCmdDrawIndexed"));
    this->CmdDrawIndirect = reinterpret_cast<PFN_vkCmdDrawIndirect>(this->GetDeviceProcAddr(device, "vkCmdDrawIndirect"));
    this->CmdDrawIndexedIndirect = reinterpret_cast<PFN_vkCmdDrawIndexedIndirect>(this->GetDeviceProcAddr(device, "vkCmdDrawIndexedIndirect"));
    this->CmdDispatch = reinterpret_cast<PFN_vkCmdDispatch>(this->GetDeviceProcAddr(device, "vkCmdDispatch"));
    this->CmdDispatchIndirect = reinterpret_cast<PFN_vkCmdDispatchIndirect>(this->GetDeviceProcAddr(device, "vkCmdDispatchIndirect"));
    this->CmdCopyBuffer = reinterpret_cast<PFN_vkCmdCopyBuffer>(this->GetDeviceProcAddr(device, "vkCmdCopyBuffer"));
    this->CmdCopyImage = reinterpret_cast<PFN_vkCmdCopyImage>(this->GetDeviceProcAddr(device, "vkCmdCopyImage"));
    this->CmdBlitImage = reinterpret_cast<PFN_vkCmdBlitImage>(this->GetDeviceProcAddr(device, "vkCmdBlitImage"));
    this->CmdCopyBufferToImage = reinterpret_cast<PFN_vkCmdCopyBufferToImage>(this->GetDeviceProcAddr(device, "vkCmdCopyBufferToImage"));
    this->CmdCopyImageToBuffer = reinterpret_cast<PFN_vkCmdCopyImageToBuffer>(this->GetDeviceProcAddr(device, "vkCmdCopyImageToBuffer"));
    this->CmdUpdateBuffer = reinterpret_cast<PFN_vkCmdUpdateBuffer>(this->GetDeviceProcAddr(device, "vkCmdUpdateBuffer"));
    this->CmdFillBuffer = reinterpret_cast<PFN_vkCmdFillBuffer>(this->GetDeviceProcAddr(device, "vkCmdFillBuffer"));
    this->CmdClearColorImage = reinterpret_cast<PFN_vkCmdClearColorImage>(this->GetDeviceProcAddr(device, "vkCmdClearColorImage"));
    this->CmdClearDepthStencilImage = reinterpret_cast<PFN_vkCmdClearDepthStencilImage>(this->GetDeviceProcAddr(device, "vkCmdClearDepthStencilImage"));
    this->CmdClearAttachments = reinterpret_cast<PFN_vkCmdClearAttachments>(this->GetDeviceProcAddr(device, "vkCmdClearAttachments"));
    this->CmdResolveImage = reinterpret_cast<PFN_vkCmdResolveImage>(this->GetDeviceProcAddr(device, "vkCmdResolveImage"));
    this->CmdSetEvent = reinterpret_cast<PFN_vkCmdSetEvent>(this->GetDeviceProcAddr(device, "vkCmdSetEvent"));
    this->CmdResetEvent = reinterpret_cast<PFN_vkCmdResetEvent>(this->GetDeviceProcAddr(device, "vkCmdResetEvent"));
    this->CmdWaitEvents = reinterpret_cast<PFN_vkCmdWaitEvents>(this->GetDeviceProcAddr(device, "vkCmdWaitEvents"));
    this->CmdPipelineBarrier = reinterpret_cast<PFN_vkCmdPipelineBarrier>(this->GetDeviceProcAddr(device, "vkCmdPipelineBarrier"));
    this->CmdBeginQuery = reinterpret_cast<PFN_vkCmdBeginQuery>(this->GetDeviceProcAddr(device, "vkCmdBeginQuery"));
    this->CmdEndQuery = reinterpret_cast<PFN_vkCmdEndQuery>(this->GetDeviceProcAddr(device, "vkCmdEndQuery"));
    this->CmdResetQueryPool = reinterpret_cast<PFN_vkCmdResetQueryPool>(this->GetDeviceProcAddr(device, "vkCmdResetQueryPool"));
    this->CmdWriteTimestamp = reinterpret_cast<PFN_vkCmdWriteTimestamp>(this->GetDeviceProcAddr(device, "vkCmdWriteTimestamp"));
    this->CmdCopyQueryPoolResults = reinterpret_cast<PFN_vkCmdCopyQueryPoolResults>(this->GetDeviceProcAddr(device, "vkCmdCopyQueryPoolResults"));
    this->CmdPushConstants = reinterpret_cast<PFN_vkCmdPushConstants>(this->GetDeviceProcAddr(device, "vkCmdPushConstants"));
    this->CmdBeginRenderPass = reinterpret_cast<PFN_vkCmdBeginRenderPass>(this->GetDeviceProcAddr(device, "vkCmdBeginRenderPass"));
    this->CmdNextSubpass = reinterpret_cast<PFN_vkCmdNextSubpass>(this->GetDeviceProcAddr(device, "vkCmdNextSubpass"));
    this->CmdEndRenderPass = reinterpret_cast<PFN_vkCmdEndRenderPass>(this->GetDeviceProcAddr(device, "vkCmdEndRenderPass"));
    this->CmdExecuteCommands = reinterpret_cast<PFN_vkCmdExecuteCommands>(this->GetDeviceProcAddr(device, "vkCmdExecuteCommands"));
    this->CreateSwapchainKHR = reinterpret_cast<PFN_vkCreateSwapchainKHR>(this->GetDeviceProcAddr(device, "vkCreateSwapchainKHR"));
    this->DestroySwapchainKHR = reinterpret_cast<PFN_vkDestroySwapchainKHR>(this->GetDeviceProcAddr(device, "vkDestroySwapchainKHR"));
    this->GetSwapchainImagesKHR = reinterpret_cast<PFN_vkGetSwapchainImagesKHR>(this->GetDeviceProcAddr(device, "vkGetSwapchainImagesKHR"));
    this->AcquireNextImageKHR = reinterpret_cast<PFN_vkAcquireNextImageKHR>(this->GetDeviceProcAddr(device, "vkAcquireNextImageKHR"));
    this->QueuePresentKHR = reinterpret_cast<PFN_vkQueuePresentKHR>(this->GetDeviceProcAddr(device, "vkQueuePresentKHR"));
    this->CreateSharedSwapchainsKHR = reinterpret_cast<PFN_vkCreateSharedSwapchainsKHR>(this->GetDeviceProcAddr(device, "vkCreateSharedSwapchainsKHR"));
    this->TrimCommandPoolKHR = reinterpret_cast<PFN_vkTrimCommandPoolKHR>(this->GetDeviceProcAddr(device, "vkTrimCommandPoolKHR"));
    this->CmdPushDescriptorSetKHR = reinterpret_cast<PFN_vkCmdPushDescriptorSetKHR>(this->GetDeviceProcAddr(device, "vkCmdPushDescriptorSetKHR"));
    this->CreateDescriptorUpdateTemplateKHR = reinterpret_cast<PFN_vkCreateDescriptorUpdateTemplateKHR>(this->GetDeviceProcAddr(device, "vkCreateDescriptorUpdateTemplateKHR"));
    this->DestroyDescriptorUpdateTemplateKHR = reinterpret_cast<PFN_vkDestroyDescriptorUpdateTemplateKHR>(this->GetDeviceProcAddr(device, "vkDestroyDescriptorUpdateTemplateKHR"));
    this->UpdateDescriptorSetWithTemplateKHR = reinterpret_cast<PFN_vkUpdateDescriptorSetWithTemplateKHR>(this->GetDeviceProcAddr(device, "vkUpdateDescriptorSetWithTemplateKHR"));
    this->CmdPushDescriptorSetWithTemplateKHR = reinterpret_cast<PFN_vkCmdPushDescriptorSetWithTemplateKHR>(this->GetDeviceProcAddr(device, "vkCmdPushDescriptorSetWithTemplateKHR"));
    this->DebugMarkerSetObjectTagEXT = reinterpret_cast<PFN_vkDebugMarkerSetObjectTagEXT>(this->GetDeviceProcAddr(device, "vkDebugMarkerSetObjectTagEXT"));
    this->DebugMarkerSetObjectNameEXT = reinterpret_cast<PFN_vkDebugMarkerSetObjectNameEXT>(this->GetDeviceProcAddr(device, "vkDebugMarkerSetObjectNameEXT"));
    this->CmdDebugMarkerBeginEXT = reinterpret_cast<PFN_vkCmdDebugMarkerBeginEXT>(this->GetDeviceProcAddr(device, "vkCmdDebugMarkerBeginEXT"));
    this->CmdDebugMarkerEndEXT = reinterpret_cast<PFN_vkCmdDebugMarkerEndEXT>(this->GetDeviceProcAddr(device, "vkCmdDebugMarkerEndEXT"));
    this->CmdDebugMarkerInsertEXT = reinterpret_cast<PFN_vkCmdDebugMarkerInsertEXT>(this->GetDeviceProcAddr(device, "vkCmdDebugMarkerInsertEXT"));
    this->CmdDrawIndirectCountAMD = reinterpret_cast<PFN_vkCmdDrawIndirectCountAMD>(this->GetDeviceProcAddr(device, "vkCmdDrawIndirectCountAMD"));
    this->CmdDrawIndexedIndirectCountAMD = reinterpret_cast<PFN_vkCmdDrawIndexedIndirectCountAMD>(this->GetDeviceProcAddr(device, "vkCmdDrawIndexedIndirectCountAMD"));
#ifdef VK_USE_PLATFORM_WIN32_KHR
    this->GetMemoryWin32HandleNV = reinterpret_cast<PFN_vkGetMemoryWin32HandleNV>(this->GetDeviceProcAddr(device, "vkGetMemoryWin32HandleNV"));
#endif
    this->GetDeviceGroupPeerMemoryFeaturesKHX = reinterpret_cast<PFN_vkGetDeviceGroupPeerMemoryFeaturesKHX>(this->GetDeviceProcAddr(device, "vkGetDeviceGroupPeerMemoryFeaturesKHX"));
    this->BindBufferMemory2KHX = reinterpret_cast<PFN_vkBindBufferMemory2KHX>(this->GetDeviceProcAddr(device, "vkBindBufferMemory2KHX"));
    this->BindImageMemory2KHX = reinterpret_cast<PFN_vkBindImageMemory2KHX>(this->GetDeviceProcAddr(device, "vkBindImageMemory2KHX"));
    this->CmdSetDeviceMaskKHX = reinterpret_cast<PFN_vkCmdSetDeviceMaskKHX>(this->GetDeviceProcAddr(device, "vkCmdSetDeviceMaskKHX"));
    this->GetDeviceGroupPresentCapabilitiesKHX = reinterpret_cast<PFN_vkGetDeviceGroupPresentCapabilitiesKHX>(this->GetDeviceProcAddr(device, "vkGetDeviceGroupPresentCapabilitiesKHX"));
    this->GetDeviceGroupSurfacePresentModesKHX = reinterpret_cast<PFN_vkGetDeviceGroupSurfacePresentModesKHX>(this->GetDeviceProcAddr(device, "vkGetDeviceGroupSurfacePresentModesKHX"));
    this->AcquireNextImage2KHX = reinterpret_cast<PFN_vkAcquireNextImage2KHX>(this->GetDeviceProcAddr(device, "vkAcquireNextImage2KHX"));
    this->CmdDispatchBaseKHX = reinterpret_cast<PFN_vkCmdDispatchBaseKHX>(this->GetDeviceProcAddr(device, "vkCmdDispatchBaseKHX"));
#ifdef VK_USE_PLATFORM_WIN32_KHX
    this->GetMemoryWin32HandleKHX = reinterpret_cast<PFN_vkGetMemoryWin32HandleKHX>(this->GetDeviceProcAddr(device, "vkGetMemoryWin32HandleKHX"));
#endif
#ifdef VK_USE_PLATFORM_WIN32_KHX
    this->GetMemoryWin32HandlePropertiesKHX = reinterpret_cast<PFN_vkGetMemoryWin32HandlePropertiesKHX>(this->GetDeviceProcAddr(device, "vkGetMemoryWin32HandlePropertiesKHX"));
#endif
    this->GetMemoryFdKHX = reinterpret_cast<PFN_vkGetMemoryFdKHX>(this->GetDeviceProcAddr(device, "vkGetMemoryFdKHX"));
    this->GetMemoryFdPropertiesKHX = reinterpret_cast<PFN_vkGetMemoryFdPropertiesKHX>(this->GetDeviceProcAddr(device, "vkGetMemoryFdPropertiesKHX"));
#ifdef VK_USE_PLATFORM_WIN32_KHX
    this->ImportSemaphoreWin32HandleKHX = reinterpret_cast<PFN_vkImportSemaphoreWin32HandleKHX>(this->GetDeviceProcAddr(device, "vkImportSemaphoreWin32HandleKHX"));
#endif
#ifdef VK_USE_PLATFORM_WIN32_KHX
    this->GetSemaphoreWin32HandleKHX = reinterpret_cast<PFN_vkGetSemaphoreWin32HandleKHX>(this->GetDeviceProcAddr(device, "vkGetSemaphoreWin32HandleKHX"));
#endif
    this->ImportSemaphoreFdKHX = reinterpret_cast<PFN_vkImportSemaphoreFdKHX>(this->GetDeviceProcAddr(device, "vkImportSemaphoreFdKHX"));
    this->GetSemaphoreFdKHX = reinterpret_cast<PFN_vkGetSemaphoreFdKHX>(this->GetDeviceProcAddr(device, "vkGetSemaphoreFdKHX"));
    this->CmdProcessCommandsNVX = reinterpret_cast<PFN_vkCmdProcessCommandsNVX>(this->GetDeviceProcAddr(device, "vkCmdProcessCommandsNVX"));
    this->CmdReserveSpaceForCommandsNVX = reinterpret_cast<PFN_vkCmdReserveSpaceForCommandsNVX>(this->GetDeviceProcAddr(device, "vkCmdReserveSpaceForCommandsNVX"));
    this->CreateIndirectCommandsLayoutNVX = reinterpret_cast<PFN_vkCreateIndirectCommandsLayoutNVX>(this->GetDeviceProcAddr(device, "vkCreateIndirectCommandsLayoutNVX"));
    this->DestroyIndirectCommandsLayoutNVX = reinterpret_cast<PFN_vkDestroyIndirectCommandsLayoutNVX>(this->GetDeviceProcAddr(device, "vkDestroyIndirectCommandsLayoutNVX"));
    this->CreateObjectTableNVX = reinterpret_cast<PFN_vkCreateObjectTableNVX>(this->GetDeviceProcAddr(device, "vkCreateObjectTableNVX"));
    this->DestroyObjectTableNVX = reinterpret_cast<PFN_vkDestroyObjectTableNVX>(this->GetDeviceProcAddr(device, "vkDestroyObjectTableNVX"));
    this->RegisterObjectsNVX = reinterpret_cast<PFN_vkRegisterObjectsNVX>(this->GetDeviceProcAddr(device, "vkRegisterObjectsNVX"));
    this->UnregisterObjectsNVX = reinterpret_cast<PFN_vkUnregisterObjectsNVX>(this->GetDeviceProcAddr(device, "vkUnregisterObjectsNVX"));
    this->CmdSetViewportWScalingNV = reinterpret_cast<PFN_vkCmdSetViewportWScalingNV>(this->GetDeviceProcAddr(device, "vkCmdSetViewportWScalingNV"));
    this->DisplayPowerControlEXT = reinterpret_cast<PFN_vkDisplayPowerControlEXT>(this->GetDeviceProcAddr(device, "vkDisplayPowerControlEXT"));
    this->RegisterDeviceEventEXT = reinterpret_cast<PFN_vkRegisterDeviceEventEXT>(this->GetDeviceProcAddr(device, "vkRegisterDeviceEventEXT"));
    this->RegisterDisplayEventEXT = reinterpret_cast<PFN_vkRegisterDisplayEventEXT>(this->GetDeviceProcAddr(device, "vkRegisterDisplayEventEXT"));
    this->GetSwapchainCounterEXT = reinterpret_cast<PFN_vkGetSwapchainCounterEXT>(this->GetDeviceProcAddr(device, "vkGetSwapchainCounterEXT"));
    this->GetRefreshCycleDurationGOOGLE = reinterpret_cast<PFN_vkGetRefreshCycleDurationGOOGLE>(this->GetDeviceProcAddr(device, "vkGetRefreshCycleDurationGOOGLE"));
    this->GetPastPresentationTimingGOOGLE = reinterpret_cast<PFN_vkGetPastPresentationTimingGOOGLE>(this->GetDeviceProcAddr(device, "vkGetPastPresentationTimingGOOGLE"));
    this->CmdSetDiscardRectangleEXT = reinterpret_cast<PFN_vkCmdSetDiscardRectangleEXT>(this->GetDeviceProcAddr(device, "vkCmdSetDiscardRectangleEXT"));
    this->SetHdrMetadataEXT = reinterpret_cast<PFN_vkSetHdrMetadataEXT>(this->GetDeviceProcAddr(device, "vkSetHdrMetadataEXT"));
}

void VulkanDeviceFunctions::ShutdownDevice(VkAllocationCallbacks* allocationCallbacks)
{
    if (this->DestroyDevice != nullptr)
        this->DestroyDevice(this->device, allocationCallbacks);
    FINJIN_ZERO_ITEM(*this);
}

const char* VulkanFormat::ToString(VkFormat format)
{
    switch (format)
    {
        case 0: return "VK_FORMAT_UNDEFINED";
        case 1: return "VK_FORMAT_R4G4_UNORM_PACK8";
        case 2: return "VK_FORMAT_R4G4B4A4_UNORM_PACK16";
        case 3: return "VK_FORMAT_B4G4R4A4_UNORM_PACK16";
        case 4: return "VK_FORMAT_R5G6B5_UNORM_PACK16";
        case 5: return "VK_FORMAT_B5G6R5_UNORM_PACK16";
        case 6: return "VK_FORMAT_R5G5B5A1_UNORM_PACK16";
        case 7: return "VK_FORMAT_B5G5R5A1_UNORM_PACK16";
        case 8: return "VK_FORMAT_A1R5G5B5_UNORM_PACK16";
        case 9: return "VK_FORMAT_R8_UNORM";
        case 10: return "VK_FORMAT_R8_SNORM";
        case 11: return "VK_FORMAT_R8_USCALED";
        case 12: return "VK_FORMAT_R8_SSCALED";
        case 13: return "VK_FORMAT_R8_UINT";
        case 14: return "VK_FORMAT_R8_SINT";
        case 15: return "VK_FORMAT_R8_SRGB";
        case 16: return "VK_FORMAT_R8G8_UNORM";
        case 17: return "VK_FORMAT_R8G8_SNORM";
        case 18: return "VK_FORMAT_R8G8_USCALED";
        case 19: return "VK_FORMAT_R8G8_SSCALED";
        case 20: return "VK_FORMAT_R8G8_UINT";
        case 21: return "VK_FORMAT_R8G8_SINT";
        case 22: return "VK_FORMAT_R8G8_SRGB";
        case 23: return "VK_FORMAT_R8G8B8_UNORM";
        case 24: return "VK_FORMAT_R8G8B8_SNORM";
        case 25: return "VK_FORMAT_R8G8B8_USCALED";
        case 26: return "VK_FORMAT_R8G8B8_SSCALED";
        case 27: return "VK_FORMAT_R8G8B8_UINT";
        case 28: return "VK_FORMAT_R8G8B8_SINT";
        case 29: return "VK_FORMAT_R8G8B8_SRGB";
        case 30: return "VK_FORMAT_B8G8R8_UNORM";
        case 31: return "VK_FORMAT_B8G8R8_SNORM";
        case 32: return "VK_FORMAT_B8G8R8_USCALED";
        case 33: return "VK_FORMAT_B8G8R8_SSCALED";
        case 34: return "VK_FORMAT_B8G8R8_UINT";
        case 35: return "VK_FORMAT_B8G8R8_SINT";
        case 36: return "VK_FORMAT_B8G8R8_SRGB";
        case 37: return "VK_FORMAT_R8G8B8A8_UNORM";
        case 38: return "VK_FORMAT_R8G8B8A8_SNORM";
        case 39: return "VK_FORMAT_R8G8B8A8_USCALED";
        case 40: return "VK_FORMAT_R8G8B8A8_SSCALED";
        case 41: return "VK_FORMAT_R8G8B8A8_UINT";
        case 42: return "VK_FORMAT_R8G8B8A8_SINT";
        case 43: return "VK_FORMAT_R8G8B8A8_SRGB";
        case 44: return "VK_FORMAT_B8G8R8A8_UNORM";
        case 45: return "VK_FORMAT_B8G8R8A8_SNORM";
        case 46: return "VK_FORMAT_B8G8R8A8_USCALED";
        case 47: return "VK_FORMAT_B8G8R8A8_SSCALED";
        case 48: return "VK_FORMAT_B8G8R8A8_UINT";
        case 49: return "VK_FORMAT_B8G8R8A8_SINT";
        case 50: return "VK_FORMAT_B8G8R8A8_SRGB";
        case 51: return "VK_FORMAT_A8B8G8R8_UNORM_PACK32";
        case 52: return "VK_FORMAT_A8B8G8R8_SNORM_PACK32";
        case 53: return "VK_FORMAT_A8B8G8R8_USCALED_PACK32";
        case 54: return "VK_FORMAT_A8B8G8R8_SSCALED_PACK32";
        case 55: return "VK_FORMAT_A8B8G8R8_UINT_PACK32";
        case 56: return "VK_FORMAT_A8B8G8R8_SINT_PACK32";
        case 57: return "VK_FORMAT_A8B8G8R8_SRGB_PACK32";
        case 58: return "VK_FORMAT_A2R10G10B10_UNORM_PACK32";
        case 59: return "VK_FORMAT_A2R10G10B10_SNORM_PACK32";
        case 60: return "VK_FORMAT_A2R10G10B10_USCALED_PACK32";
        case 61: return "VK_FORMAT_A2R10G10B10_SSCALED_PACK32";
        case 62: return "VK_FORMAT_A2R10G10B10_UINT_PACK32";
        case 63: return "VK_FORMAT_A2R10G10B10_SINT_PACK32";
        case 64: return "VK_FORMAT_A2B10G10R10_UNORM_PACK32";
        case 65: return "VK_FORMAT_A2B10G10R10_SNORM_PACK32";
        case 66: return "VK_FORMAT_A2B10G10R10_USCALED_PACK32";
        case 67: return "VK_FORMAT_A2B10G10R10_SSCALED_PACK32";
        case 68: return "VK_FORMAT_A2B10G10R10_UINT_PACK32";
        case 69: return "VK_FORMAT_A2B10G10R10_SINT_PACK32";
        case 70: return "VK_FORMAT_R16_UNORM";
        case 71: return "VK_FORMAT_R16_SNORM";
        case 72: return "VK_FORMAT_R16_USCALED";
        case 73: return "VK_FORMAT_R16_SSCALED";
        case 74: return "VK_FORMAT_R16_UINT";
        case 75: return "VK_FORMAT_R16_SINT";
        case 76: return "VK_FORMAT_R16_SFLOAT";
        case 77: return "VK_FORMAT_R16G16_UNORM";
        case 78: return "VK_FORMAT_R16G16_SNORM";
        case 79: return "VK_FORMAT_R16G16_USCALED";
        case 80: return "VK_FORMAT_R16G16_SSCALED";
        case 81: return "VK_FORMAT_R16G16_UINT";
        case 82: return "VK_FORMAT_R16G16_SINT";
        case 83: return "VK_FORMAT_R16G16_SFLOAT";
        case 84: return "VK_FORMAT_R16G16B16_UNORM";
        case 85: return "VK_FORMAT_R16G16B16_SNORM";
        case 86: return "VK_FORMAT_R16G16B16_USCALED";
        case 87: return "VK_FORMAT_R16G16B16_SSCALED";
        case 88: return "VK_FORMAT_R16G16B16_UINT";
        case 89: return "VK_FORMAT_R16G16B16_SINT";
        case 90: return "VK_FORMAT_R16G16B16_SFLOAT";
        case 91: return "VK_FORMAT_R16G16B16A16_UNORM";
        case 92: return "VK_FORMAT_R16G16B16A16_SNORM";
        case 93: return "VK_FORMAT_R16G16B16A16_USCALED";
        case 94: return "VK_FORMAT_R16G16B16A16_SSCALED";
        case 95: return "VK_FORMAT_R16G16B16A16_UINT";
        case 96: return "VK_FORMAT_R16G16B16A16_SINT";
        case 97: return "VK_FORMAT_R16G16B16A16_SFLOAT";
        case 98: return "VK_FORMAT_R32_UINT";
        case 99: return "VK_FORMAT_R32_SINT";
        case 100: return "VK_FORMAT_R32_SFLOAT";
        case 101: return "VK_FORMAT_R32G32_UINT";
        case 102: return "VK_FORMAT_R32G32_SINT";
        case 103: return "VK_FORMAT_R32G32_SFLOAT";
        case 104: return "VK_FORMAT_R32G32B32_UINT";
        case 105: return "VK_FORMAT_R32G32B32_SINT";
        case 106: return "VK_FORMAT_R32G32B32_SFLOAT";
        case 107: return "VK_FORMAT_R32G32B32A32_UINT";
        case 108: return "VK_FORMAT_R32G32B32A32_SINT";
        case 109: return "VK_FORMAT_R32G32B32A32_SFLOAT";
        case 110: return "VK_FORMAT_R64_UINT";
        case 111: return "VK_FORMAT_R64_SINT";
        case 112: return "VK_FORMAT_R64_SFLOAT";
        case 113: return "VK_FORMAT_R64G64_UINT";
        case 114: return "VK_FORMAT_R64G64_SINT";
        case 115: return "VK_FORMAT_R64G64_SFLOAT";
        case 116: return "VK_FORMAT_R64G64B64_UINT";
        case 117: return "VK_FORMAT_R64G64B64_SINT";
        case 118: return "VK_FORMAT_R64G64B64_SFLOAT";
        case 119: return "VK_FORMAT_R64G64B64A64_UINT";
        case 120: return "VK_FORMAT_R64G64B64A64_SINT";
        case 121: return "VK_FORMAT_R64G64B64A64_SFLOAT";
        case 122: return "VK_FORMAT_B10G11R11_UFLOAT_PACK32";
        case 123: return "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32";
        case 124: return "VK_FORMAT_D16_UNORM";
        case 125: return "VK_FORMAT_X8_D24_UNORM_PACK32";
        case 126: return "VK_FORMAT_D32_SFLOAT";
        case 127: return "VK_FORMAT_S8_UINT";
        case 128: return "VK_FORMAT_D16_UNORM_S8_UINT";
        case 129: return "VK_FORMAT_D24_UNORM_S8_UINT";
        case 130: return "VK_FORMAT_D32_SFLOAT_S8_UINT";
        case 131: return "VK_FORMAT_BC1_RGB_UNORM_BLOCK";
        case 132: return "VK_FORMAT_BC1_RGB_SRGB_BLOCK";
        case 133: return "VK_FORMAT_BC1_RGBA_UNORM_BLOCK";
        case 134: return "VK_FORMAT_BC1_RGBA_SRGB_BLOCK";
        case 135: return "VK_FORMAT_BC2_UNORM_BLOCK";
        case 136: return "VK_FORMAT_BC2_SRGB_BLOCK";
        case 137: return "VK_FORMAT_BC3_UNORM_BLOCK";
        case 138: return "VK_FORMAT_BC3_SRGB_BLOCK";
        case 139: return "VK_FORMAT_BC4_UNORM_BLOCK";
        case 140: return "VK_FORMAT_BC4_SNORM_BLOCK";
        case 141: return "VK_FORMAT_BC5_UNORM_BLOCK";
        case 142: return "VK_FORMAT_BC5_SNORM_BLOCK";
        case 143: return "VK_FORMAT_BC6H_UFLOAT_BLOCK";
        case 144: return "VK_FORMAT_BC6H_SFLOAT_BLOCK";
        case 145: return "VK_FORMAT_BC7_UNORM_BLOCK";
        case 146: return "VK_FORMAT_BC7_SRGB_BLOCK";
        case 147: return "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK";
        case 148: return "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK";
        case 149: return "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK";
        case 150: return "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK";
        case 151: return "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK";
        case 152: return "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK";
        case 153: return "VK_FORMAT_EAC_R11_UNORM_BLOCK";
        case 154: return "VK_FORMAT_EAC_R11_SNORM_BLOCK";
        case 155: return "VK_FORMAT_EAC_R11G11_UNORM_BLOCK";
        case 156: return "VK_FORMAT_EAC_R11G11_SNORM_BLOCK";
        case 157: return "VK_FORMAT_ASTC_4x4_UNORM_BLOCK";
        case 158: return "VK_FORMAT_ASTC_4x4_SRGB_BLOCK";
        case 159: return "VK_FORMAT_ASTC_5x4_UNORM_BLOCK";
        case 160: return "VK_FORMAT_ASTC_5x4_SRGB_BLOCK";
        case 161: return "VK_FORMAT_ASTC_5x5_UNORM_BLOCK";
        case 162: return "VK_FORMAT_ASTC_5x5_SRGB_BLOCK";
        case 163: return "VK_FORMAT_ASTC_6x5_UNORM_BLOCK";
        case 164: return "VK_FORMAT_ASTC_6x5_SRGB_BLOCK";
        case 165: return "VK_FORMAT_ASTC_6x6_UNORM_BLOCK";
        case 166: return "VK_FORMAT_ASTC_6x6_SRGB_BLOCK";
        case 167: return "VK_FORMAT_ASTC_8x5_UNORM_BLOCK";
        case 168: return "VK_FORMAT_ASTC_8x5_SRGB_BLOCK";
        case 169: return "VK_FORMAT_ASTC_8x6_UNORM_BLOCK";
        case 170: return "VK_FORMAT_ASTC_8x6_SRGB_BLOCK";
        case 171: return "VK_FORMAT_ASTC_8x8_UNORM_BLOCK";
        case 172: return "VK_FORMAT_ASTC_8x8_SRGB_BLOCK";
        case 173: return "VK_FORMAT_ASTC_10x5_UNORM_BLOCK";
        case 174: return "VK_FORMAT_ASTC_10x5_SRGB_BLOCK";
        case 175: return "VK_FORMAT_ASTC_10x6_UNORM_BLOCK";
        case 176: return "VK_FORMAT_ASTC_10x6_SRGB_BLOCK";
        case 177: return "VK_FORMAT_ASTC_10x8_UNORM_BLOCK";
        case 178: return "VK_FORMAT_ASTC_10x8_SRGB_BLOCK";
        case 179: return "VK_FORMAT_ASTC_10x10_UNORM_BLOCK";
        case 180: return "VK_FORMAT_ASTC_10x10_SRGB_BLOCK";
        case 181: return "VK_FORMAT_ASTC_12x10_UNORM_BLOCK";
        case 182: return "VK_FORMAT_ASTC_12x10_SRGB_BLOCK";
        case 183: return "VK_FORMAT_ASTC_12x12_UNORM_BLOCK";
        case 184: return "VK_FORMAT_ASTC_12x12_SRGB_BLOCK";
        case 1000054000: return "VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG";
        case 1000054001: return "VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG";
        case 1000054002: return "VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG";
        case 1000054003: return "VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG";
        case 1000054004: return "VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG";
        case 1000054005: return "VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG";
        case 1000054006: return "VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG";
        case 1000054007: return "VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG";
        default: return FINJIN_ENUM_UNKNOWN_STRING;
    }
}

const char* VulkanResult::ToString(VkResult result)
{
    switch (result)
    {
        case 0: return "VK_SUCCESS";
        case 1: return "VK_NOT_READY";
        case 2: return "VK_TIMEOUT";
        case 3: return "VK_EVENT_SET";
        case 4: return "VK_EVENT_RESET";
        case 5: return "VK_INCOMPLETE";
        case -1: return "VK_ERROR_OUT_OF_HOST_MEMORY";
        case -2: return "VK_ERROR_OUT_OF_DEVICE_MEMORY";
        case -3: return "VK_ERROR_INITIALIZATION_FAILED";
        case -4: return "VK_ERROR_DEVICE_LOST";
        case -5: return "VK_ERROR_MEMORY_MAP_FAILED";
        case -6: return "VK_ERROR_LAYER_NOT_PRESENT";
        case -7: return "VK_ERROR_EXTENSION_NOT_PRESENT";
        case -8: return "VK_ERROR_FEATURE_NOT_PRESENT";
        case -9: return "VK_ERROR_INCOMPATIBLE_DRIVER";
        case -10: return "VK_ERROR_TOO_MANY_OBJECTS";
        case -11: return "VK_ERROR_FORMAT_NOT_SUPPORTED";
        case -12: return "VK_ERROR_FRAGMENTED_POOL";
        case -1000000000: return "VK_ERROR_SURFACE_LOST_KHR";
        case -1000000001: return "VK_ERROR_NATIVE_WINDOW_IN_USE_KHR";
        case 1000001003: return "VK_SUBOPTIMAL_KHR";
        case -1000001004: return "VK_ERROR_OUT_OF_DATE_KHR";
        case -1000003001: return "VK_ERROR_INCOMPATIBLE_DISPLAY_KHR";
        case -1000011001: return "VK_ERROR_VALIDATION_FAILED_EXT";
        case -1000012000: return "VK_ERROR_INVALID_SHADER_NV";
        case -1000069000: return "VK_ERROR_OUT_OF_POOL_MEMORY_KHR";
        case -1000072003: return "VK_ERROR_INVALID_EXTERNAL_HANDLE_KHX";
        default: return FINJIN_ENUM_UNKNOWN_STRING;
    }
}

#endif
